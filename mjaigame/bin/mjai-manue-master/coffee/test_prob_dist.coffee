assert = require("assert")
ProbDist = require("./prob_dist")
HashMap = require("./hash_map")

pb1 = new ProbDist(new HashMap([[0, 0.5], [8000, 0.5]]))
pb2 = new ProbDist(new HashMap([[0, 0.5], [-2000, 0.5]]))
pb3 = new ProbDist(new HashMap([[[0, 1], 0.5], [[2, 3], 0.5]]))
pb4 = new ProbDist(new HashMap([[[1, 2], 0.5], [[4, 8], 0.5]]))
pb5 = new ProbDist(new HashMap([[1, 0.5], [-1, 0.5]]))

rpb1 = ProbDist.add(pb1, pb1)
assert.ok(Math.abs(rpb1.dist().get(0) - 0.25) < 0.001)
assert.ok(Math.abs(rpb1.dist().get(8000) - 0.5) < 0.001)
assert.ok(Math.abs(rpb1.dist().get(16000) - 0.25) < 0.001)
assert.ok(Math.abs(rpb1.expected() - 8000) < 0.001)

rpb2 = ProbDist.merge([[pb1, 0.5], [pb2, 0.5]])
assert.ok(Math.abs(rpb2.dist().get(0) - 0.5) < 0.001)
assert.ok(Math.abs(rpb2.dist().get(8000) - 0.25) < 0.001)
assert.ok(Math.abs(rpb2.dist().get(-2000) - 0.25) < 0.001)
assert.ok(Math.abs(rpb2.expected() - (8000 * 0.25 - 2000 * 0.25)) < 0.001)

rpb3 = ProbDist.add(pb3, pb3)
assert.ok(Math.abs(rpb3.dist().get([0, 2]) - 0.25) < 0.001)
assert.ok(Math.abs(rpb3.dist().get([2, 4]) - 0.5) < 0.001)
assert.ok(Math.abs(rpb3.dist().get([4, 6]) - 0.25) < 0.001)
assert.ok(Math.abs(rpb3.expected()[0] - 2) < 0.001)
assert.ok(Math.abs(rpb3.expected()[1] - 4) < 0.001)

rpb4 = ProbDist.mult(pb4, pb5)
assert.ok(Math.abs(rpb4.dist().get([1, 2]) - 0.25) < 0.001)
assert.ok(Math.abs(rpb4.dist().get([-1, -2]) - 0.25) < 0.001)
assert.ok(Math.abs(rpb4.dist().get([4, 8]) - 0.25) < 0.001)
assert.ok(Math.abs(rpb4.dist().get([-4, -8]) - 0.25) < 0.001)
